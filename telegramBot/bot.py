import menu
from api_client import ApiClient
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

API_TOKEN = 'YOUR_API_KEY'

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['add_category'] = False
    context.user_data['delete_category'] = False
    context.user_data['category_number'] = None
    context.user_data['update_category'] = False
    context.user_data['update_category_name'] = False

    context.user_data['add_task'] = False
    context.user_data['task_number'] = None
    context.user_data['update_task'] = False
    context.user_data['update_task_name'] = False
    context.user_data['delete_task'] = False
    
    username = update.effective_user.username
    print(username)
    client = ApiClient(username)
    auth_login = client.auth()
    
    if auth_login:
        context.user_data['username'] = username
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {auth_login}!")
        await menu.main_menu(update)
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    username = context.user_data['username']
    client = ApiClient(username)
    await handle_category(update, context)
    await handle_task(update, context)

    if message == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏":
        data = client.get_task()
        if data:
            await update.message.reply_text(data)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏")

    if message == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await menu.main_menu(update)
    
    if message == "‚ÑπÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è":
        data = client.get_statistic()
        print(f"DATA --- {data}")
        if data:
            await menu.main_menu(update, text=data)
        else:
            await menu.main_menu(update, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            
        
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    username = context.user_data['username']
    print(username)
    client = ApiClient(username)
    
    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if message == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        data = client.get_categories()
        if data:
            await update.message.reply_text(data)
            catalogies = client.get_categories(True)
            await menu.categories_menu(update, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", catalogies)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if message == "üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ")
        context.user_data['category_name'] = update.message.text
        context.user_data['add_category'] = True
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if context.user_data['add_category']:
        category_name = message
        print(f"category_name: {category_name}")
        data = client.create_category(category_name)
        context.user_data['add_category'] = False
    
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        updated_categories_list = client.get_categories(True)
        
        if data:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            data = client.get_categories()
            if data:
                await update.message.reply_text(data)
                await menu.categories_menu(update, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞", updated_categories_list)
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        else:
            await menu.categories_menu(update, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", updated_categories_list)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if message == "üìÇ –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        context.user_data['delete_category'] = True
        data = client.get_categories(True)
        if data:
            await menu.delete_category_menu(update, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", data)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    if context.user_data['update_category']:
        context.user_data['update_category_name'] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ")
        context.user_data['update_category'] = False
        
    elif context.user_data['update_category_name']:
        category_number = context.user_data['category_number']
        category_name = message
        data = client.update_category(category_number=category_number, category_title=category_name)

        updated_categories_list = client.get_categories(is_list=True)
        updated_categories = client.get_categories()

        if data:
            await menu.categories_menu(update, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", updated_categories_list)
        else:
            await menu.categories_menu(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", updated_categories_list)

        await update.message.reply_text(updated_categories)
        context.user_data['update_category_name'] = False

    if message == "üìÇ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        data = client.get_categories(is_list=True)
        if data:
            context.user_data['update_category'] = True
            await menu.categories_menu(update, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", data)
        else:
            await menu.categories_menu(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", data)


    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if '. üìÇ' in message:
        category_number = message.split('.')[0]
        context.user_data['category_number'] = category_number
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if context.user_data['delete_category']:
            data = client.delete_category(category_number=category_number)
            updated_categories_list  = client.get_categories(is_list=True)
            updated_categories = client.get_categories()
                        
            if data:
                await menu.categories_menu(update, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", updated_categories_list)
                context.user_data['category_number'] = None
            else:
                await menu.categories_menu(update, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", updated_categories_list)

            await update.message.reply_text(updated_categories)
        
        
        # –í—ã–≤–æ–¥ –∑–∞–¥–∞—á –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        elif context.user_data['update_category_name'] == False:
            # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            sorted_data = client.get_task(category_number=category_number)
            
            if sorted_data:
                sorted_data_list = client.get_task(category_number=category_number, is_list=True)
                await update.message.reply_text(sorted_data)
                await menu.tasks_menu(update, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", sorted_data_list)
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏")
        
        context.user_data['delete_category'] = False
        
    
async def handle_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    username = context.user_data['username']
    client = ApiClient(username)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if message == "üìã –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ")
        context.user_data['task_number'] = update.message.text
        context.user_data['add_task'] = True
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if context.user_data['add_task']:
        category_number = context.user_data['category_number']
        task_name = message
        print(f"task_name: {task_name}")
        print(f"category_number: {category_number}")
        data = client.create_task(category_number=category_number, task_title=task_name)
        context.user_data['add_task'] = False
        
        if data:    
            sorted_data = client.get_task(category_number=category_number)
            sorted_data_list = client.get_task(category_number=category_number, is_list=True)
            await update.message.reply_text(sorted_data)
            await menu.tasks_menu(update, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", sorted_data_list)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    
    
    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if message == "üìã –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data['delete_task'] = True
        category_number = context.user_data['category_number']
        print(f"CATEGORY NUMBER --- {category_number}")
        data = client.get_task(category_number=category_number, is_list=True)
        if data:
            await menu.delete_task_menu(update, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", data)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏")

    if message == "üìã –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data['update_task'] = True
        category_number = context.user_data['category_number']
        task_number = context.user_data['task_number']
        data = client.get_task(category_number=category_number, is_list=True)
        if data:
            await menu.delete_task_menu(update, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", data)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏")

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if ". ‚ùå" in message or ". ‚úÖ" in message:
        print(f"MESSAGE --- {message}")
        task_number = message.split('.')[0]
        context.user_data['task_number'] = task_number
        category_number = context.user_data['category_number']
        print(f"CATEGORY NUMBER --- {category_number}")
        print(f"TASK NUMBER --- {task_number}")

        if context.user_data['delete_task']:
            data = client.delete_task(category_number=category_number, task_number=task_number)
            sorted_data = client.get_task(category_number=category_number)
            sorted_data_list = client.get_task(category_number=category_number, is_list=True)

            if data:
                await menu.tasks_menu(update, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", sorted_data_list)
                await update.message.reply_text(sorted_data)
            else:
                await menu.tasks_menu(update, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", sorted_data_list)
                await update.message.reply_text(sorted_data)

            context.user_data['delete_task'] = False

        elif context.user_data['update_task']:
            context.user_data['update_task_name'] = True
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ")

        else: 
            if "‚úÖ" in message:
                is_done = False
            else:
                is_done = True
            print(f"IS DONE --- {is_done}")
            data = client.done_task(category_number=category_number, task_number=task_number, is_done=is_done)
            sorted_data = client.get_task(category_number=category_number)
            sorted_data_list = client.get_task(category_number=category_number, is_list=True)

            if data:
                await menu.tasks_menu(update, "–ó–∞–¥–∞—á–∞ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", sorted_data_list)
            else:
                await menu.tasks_menu(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É", sorted_data_list)

            await update.message.reply_text(sorted_data)
                
    
    elif context.user_data['update_task_name']:
        task_name = message
        category_number = context.user_data['category_number']
        task_number = context.user_data['task_number']
        print(f"TASK NAME --- {task_name}")
        print(f"CATEGORY NUMBER --- {category_number}")
        print(f"TASK NUMBER --- {task_number}")

        data = client.update_task(category_number=category_number, task_number=task_number, task_title=task_name)
        sorted_data = client.get_task(category_number=category_number)
        sorted_data_list = client.get_task(category_number=category_number, is_list=True)

        if data:
            await menu.tasks_menu(update, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", sorted_data_list)
            await update.message.reply_text(sorted_data)
        else:
            await menu.tasks_menu(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É", sorted_data_list)
            await update.message.reply_text(sorted_data)

        context.user_data['update_task'] = False
        context.user_data['update_task_name'] = False
        
        

if __name__ == '__main__':
    app = ApplicationBuilder().token(API_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
